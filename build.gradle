buildscript {
    repositories {
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
        mavenCentral()
    }
    dependencies {
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
    }
}

plugins {
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '[6.0.16,6.2)'
    id 'net.darkhax.curseforgegradle' version '1.1.25'
    id 'com.modrinth.minotaur' version '2.+'
    id 'com.github.breadmoirai.github-release' version '2.4.1'
}

apply plugin: 'org.spongepowered.mixin'

group = mod_group_id
version = mod_version

base {
    archivesName = mod_id
}

java {
    toolchain.languageVersion = JavaLanguageVersion.of(17)
}

minecraft {
    mappings channel: mapping_channel, version: mapping_version


    copyIdeResources = true



    runs {
        configureEach {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'


            property 'forge.logging.console.level', 'debug'

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        client {
            property 'forge.enabledGameTestNamespaces', mod_id
        }

        server {
            property 'forge.enabledGameTestNamespaces', mod_id
            args '--nogui'
        }

        gameTestServer {
            property 'forge.enabledGameTestNamespaces', mod_id
        }

        data {
            workingDirectory project.file('run-data')

            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        }
    }
}

mixin {
    add sourceSets.main, "${mod_id}.refmap.json"

    config "${mod_id}.mixins.json"
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {

}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"




    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'

}

tasks.named('processResources', ProcessResources).configure {
    var replaceProperties = [minecraft_version   : minecraft_version, minecraft_version_range: minecraft_version_range,
                             forge_version       : forge_version, forge_version_range: forge_version_range,
                             loader_version_range: loader_version_range,
                             mod_id              : mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
                             mod_authors         : mod_authors, mod_description: mod_description,]

    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}


publishing {
    publications {
        register('mavenJava', MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

task publishCurseForge(type: net.darkhax.curseforgegradle.TaskPublishCurseForge) {
    apiToken = System.getenv('CURSEFORGE_API_KEY') ?: (project.findProperty('curseforge_api_key') ?: 'XXX')

    def curseforgeProjectId = (project.findProperty('curseforge_project_id') ?: '0').toString()
    def mainFile = upload(curseforgeProjectId.toInteger(), jar)
    mainFile.releaseType = project.version_type
    def changelogFile = file('changelog.txt')
    if (changelogFile.exists()) {
        mainFile.changelog = changelogFile
        mainFile.changelogType = 'text'
    }
    mainFile.displayName = "${rootProject.name} ${project.version}"
    mainFile.addGameVersion(project.minecraft_version)
    mainFile.addJavaVersion('Java 17')
    mainFile.addModLoader('forge')
    mainFile.addRequirement('applied-energistics-2')
}

modrinth {
    var modrinthToken = System.getenv('MODRINTH_TOKEN') ?: (project.findProperty('modrinth_token') ?: 'XXX')
    token = modrinthToken
    projectId = (project.findProperty('modrinth_project_id') ?: 'XXXXXX').toString()
    versionNumber = project.version as String
    versionName = "${rootProject.name} ${project.version}"
    versionType = project.version_type
    uploadFile = jar
    gameVersions = [project.minecraft_version]
    loaders = ['forge']
    def changelogFile = file('changelog.txt')
    changelog = changelogFile.exists() ? changelogFile.text : ''
    dependencies {
        required.project 'ae2'
    }
}

githubRelease {
    token System.getenv('GITHUB_API_KEY') ?: (project.findProperty('github_api_key') ?: 'XXX')
    owner 'yuuki1293'
    repo (project.findProperty('github_release_repo') ?: 'AE2-Pattern-Encoding-Access-Terminal').toString()
    tagName "v${project.version}"
    targetCommitish (project.findProperty('github_release_branch') ?: 'main').toString()
    releaseName "${rootProject.name} ${project.version}"
    body (file('changelog.txt').exists() ? file('changelog.txt').text : '')
    draft true
    prerelease project.version_type != 'release'
    releaseAssets jar
    allowUploadToExisting.set false
    overwrite false
    dryRun false
    apiEndpoint 'https://api.github.com'
    client
}

tasks.register('uploadAll') {
    group = 'publishing'
    description = 'Uploads the mod to CurseForge, Modrinth, and GitHub using configured credentials.'
    dependsOn 'publishCurseForge', 'modrinth', 'githubRelease'
}

tasks.named('jar', Jar).configure {
    manifest {
        attributes(["Specification-Title"     : mod_id,
                    "Specification-Vendor"    : mod_authors,
                    "Specification-Version"   : "1",
                    "Implementation-Title"    : project.name,
                    "Implementation-Version"  : project.jar.archiveVersion,
                    "Implementation-Vendor"   : mod_authors,
                    "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")])
    }

    finalizedBy 'reobfJar'
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}
